"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[4338],{85050:(e,t,i)=>{i.r(t),i.d(t,{data:()=>d});const d={key:"v-08473f8b",path:"/devices/CCT5011-0001_CCT5011-0002_MEG5011-0001.html",title:"Schneider Electric CCT5011-0001/CCT5011-0002/MEG5011-0001 control via MQTT",lang:"en-US",frontmatter:{title:"Schneider Electric CCT5011-0001/CCT5011-0002/MEG5011-0001 control via MQTT",description:"Integrate your Schneider Electric CCT5011-0001/CCT5011-0002/MEG5011-0001 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendors bridge or gateway."},excerpt:"",headers:[{level:2,title:"Notes",slug:"notes",children:[]},{level:2,title:"Exposes",slug:"exposes",children:[{level:3,title:"Switch",slug:"switch",children:[]},{level:3,title:"Linkquality (numeric)",slug:"linkquality-numeric",children:[]}]}],filePathRelative:"devices/CCT5011-0001_CCT5011-0002_MEG5011-0001.md"}},95257:(e,t,i)=>{i.r(t),i.d(t,{default:()=>r});const d=(0,i(66252).uE)('<h1 id="schneider-electric-cct5011-0001-cct5011-0002-meg5011-0001" tabindex="-1"><a class="header-anchor" href="#schneider-electric-cct5011-0001-cct5011-0002-meg5011-0001" aria-hidden="true">#</a> Schneider Electric CCT5011-0001/CCT5011-0002/MEG5011-0001</h1><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Model</td><td>CCT5011-0001/CCT5011-0002/MEG5011-0001</td></tr><tr><td>Vendor</td><td>Schneider Electric</td></tr><tr><td>Description</td><td>Micro module switch</td></tr><tr><td>Exposes</td><td>switch (state), linkquality</td></tr><tr><td>Picture</td><td><img src="https://psi-4ward.github.io/zigbee2mqtt-docs/images/devices/CCT5011-0001-CCT5011-0002-MEG5011-0001.jpg" alt="Schneider Electric CCT5011-0001/CCT5011-0002/MEG5011-0001"></td></tr><tr><td>White-label</td><td>Elko EKO07144</td></tr></tbody></table><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>None</p><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes" aria-hidden="true">#</a> Exposes</h2><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> Switch</h3><p>The current state of this switch is in the published state under the <code>state</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state&quot;: &quot;ON&quot;}</code>, <code>{&quot;state&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state&quot;: &quot;&quot;}</code>.</p><h3 id="linkquality-numeric" tabindex="-1"><a class="header-anchor" href="#linkquality-numeric" aria-hidden="true">#</a> Linkquality (numeric)</h3><p>Link quality (signal strength). Value can be found in the published state on the <code>linkquality</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The minimal value is <code>0</code> and the maximum value is <code>255</code>. The unit of this value is <code>lqi</code>.</p>',9),c={},r=(0,i(83744).Z)(c,[["render",function(e,t){return d}]])},83744:(e,t)=>{t.Z=(e,t)=>{for(const[i,d]of t)e[i]=d;return e}}}]);