"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[3906],{65423:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-4a11ae11",path:"/guide/development/user_extensions.html",title:"User extensions",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"User extensions list",slug:"user-extensions-list",children:[]},{level:2,title:"Save user extension",slug:"save-user-extension",children:[]},{level:2,title:"Remove user extension",slug:"remove-user-extension",children:[]}],filePathRelative:"guide/development/user_extensions.md"}},61488:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(66252);const t=(0,e._)("h1",{id:"user-extensions",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#user-extensions","aria-hidden":"true"},"#"),(0,e.Uk)(" User extensions")],-1),p=(0,e._)("p",null,"User extensions is a way to extend Zigbee2MQTT behavior, user extensions works in same way as internal extensions.",-1),o=(0,e.Uk)("To get familiar with extensions framework please read "),c={href:"https://github.com/Koenkk/zigbee2mqtt/tree/master/lib/extension",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("source code of internal extensions"),r=(0,e.Uk)("."),i=(0,e.uE)('<p>User extensions are stored in <code>data/extension</code> folder and have to export a JavaScript Class or Function.</p><p>Example:</p><p>File: <code>data/extension/my-first-extension.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyExampleExtension</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">zigbee<span class="token punctuation">,</span> mqtt<span class="token punctuation">,</span> state<span class="token punctuation">,</span> publishEntityState<span class="token punctuation">,</span> eventBus<span class="token punctuation">,</span> settings<span class="token punctuation">,</span> logger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>zigbee <span class="token operator">=</span> zigbee<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>mqtt <span class="token operator">=</span> mqtt<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>publishEntityState <span class="token operator">=</span> publishEntityState<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> eventBus<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>settings <span class="token operator">=</span> settings<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>\n\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Loaded  MyExampleExtension&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This method is called by the controller once Zigbee has been started.\n     */</span>\n    <span class="token comment">// onZigbeeStarted() {}</span>\n\n    <span class="token doc-comment comment">/**\n     * This method is called by the controller once connected to the MQTT server.\n     */</span>\n    <span class="token function">onMQTTConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>mqtt<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&#39;example/extension&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello from MyExampleExtension&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Is called when a Zigbee message from a device is received.\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">type</span> Type of the message\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">data</span> Data of the message\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token operator">?</span><span class="token punctuation">}</span></span> <span class="token parameter">resolvedEntity</span> Resolved entity returned from this.zigbee.resolveEntity()\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token operator">?</span><span class="token punctuation">}</span></span> <span class="token parameter">settingsDevice</span> Device settings\n     */</span>\n    <span class="token comment">// onZigbeeEvent(type, data, resolvedEntity) {}</span>\n\n    <span class="token doc-comment comment">/**\n     * Is called when a MQTT message is received\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">topic</span> Topic on which the message was received\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">message</span> The received message\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span> if the message was handled\n     */</span>\n    <span class="token comment">// onMQTTMessage(topic, message) {}</span>\n\n    <span class="token doc-comment comment">/**\n     * Is called once the extension has to stop\n     */</span>\n    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">.</span><span class="token function">removeListenersExtension</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyExampleExtension<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h2 id="user-extensions-list" tabindex="-1"><a class="header-anchor" href="#user-extensions-list" aria-hidden="true">#</a> User extensions list</h2><p>Once Zigbee2MQTT starts it publishes <code>zigbee2mqtt/bridge/extensions</code> with payload <code>[{&quot;name&quot;: &quot;my-first-extension.js&quot;: &quot;code&quot;: &lt;HERE COMES YOUR EXTENSION SOURCE CODE&gt;}]</code> containing all the loaded user extensions.</p><h2 id="save-user-extension" tabindex="-1"><a class="header-anchor" href="#save-user-extension" aria-hidden="true">#</a> Save user extension</h2><p>To save a user extension over the API publish to <code>zigbee2mqtt/bridge/request/extension/save</code> with payload <code>{&quot;name&quot;: &quot;my-first-extension.js&quot;, &quot;code&quot;: &lt;HERE COMES YOUR EXTENSION SOURCE CODE&gt;}</code>.</p><h2 id="remove-user-extension" tabindex="-1"><a class="header-anchor" href="#remove-user-extension" aria-hidden="true">#</a> Remove user extension</h2><p>To remove a user extension over the API publish to <code>zigbee2mqtt/bridge/request/extension/remove</code> with payload <code>{&quot;name&quot;: &quot;my-first-extension.js&quot;}</code>.</p>',10),u={},k=(0,a(83744).Z)(u,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,(0,e._)("p",null,[o,(0,e._)("a",c,[l,(0,e.Wm)(a)]),r]),i],64)}]])},83744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);